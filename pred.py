import collections

price = [4000,
5500,
6000,
6600,
6900,
7000,
7500,
8000,
8600,
8900,
9592,
9900,
9900,
9900,
10000,
11000,
11500,
11500,
11900,
12000,
12000,
12000,
13900,
15000,
15000,
15200,
15500,
16000,
16500,
17100,
17500,
17900,
18000,
18000,
19000,
19900,
19900,
19900,
19900,
20000,
20000,
21000,
21000,
23000,
23500,
24900,
24900,
24900,
25000,
25000,
25000,
26900,
29399,
29900,
29900,
29900,
29950,
30000,
31900,
34900,
34900,
34900,
35000,
35000,
35000,
35000,
37000,
38900,
39900,
39900,
40000,
40000,
40000,
42500,
42900,
43000,
45000,
46500,
48750,
49900,
49900,
49900,
50000,
54900,
55000,
55105,
57500,
59000,
60000,
64900,
68900,
68900,
69500,
70000,
77805,
79900,
79900,
94000,
94000,
3000,
4000,
2900,
4000,
3900,
4500,
6000,
6000,
8000,
4500,
5200,
7500,
7000,
5000,
5000,
5000,
5000,
6500,
8000,
6000,
7500,
6300,
7000,
6800,
8500,
10900,
9900,
7000,
9400,
7000,
7200,
9000,
7500,
9900,
6000,
7700,
9000,
9900,
12000,
9500,
8000,
8900,
10200,
11000,
8900,
7744,
9000,
12000,
11000,
9900,
11000,
10000,
12000,
14850,
9900,
12000,
9000,
11900,
7499,
9000,
7500,
10800,
10900,
14900,
13000,
11000,
11000,
14900,
9000,
11000,
10000,
18500,
14900,
10000,
11700,
11900,
12000,
13000,
15000,
15000,
9900,
12500,
11000,
12475,
15900,
12500,
16500,
19000,
20000,
9500,
12000,
16900,
16500,
19000,
13000,
14000,
10900,
13500,
13500,
14900,
14900,
14000,
15650,
14900,
15000,
15000,
15000,
14500,
14900,
13500,
18000,
15000,
16000,
15500,
15900,
15900,
20000,
19900,
19000,
18888,
21000,
18000,
14900,
16500,
20000,
21800,
17000,
18000,
16000,
15900,
29900,
17600,
18000,
29900,
19900,
22000,
21500,
18000,
19800,
14000,
20000,
19500,
20300,
19900,
22500,
20000,
23900,
24900,
28900,
23000,
26900,
35000,
25000,
25900,
25500,
37500,
24500,
29900,
36900,
29900,
27000,
26775,
29900,
27900,
29900,
25000,
29900,
40000,
28000,
35000,
25000,
30000,
35500,
23500,
42000,
44900,
49900,
49900,
59900,
59700,
59900,
69900,
64500,
79900,
80000,
99900,
90000,
94000]

import pdb

def median(s):
    i = len(s)
    if not i%2:
        return (s[int(i/2)-1]+s[int(i/2)])/2.0
    return s[int((i-1)/2)]

def roundUp(x, n=-3):
    if n < 0:
        return round(float(x)/(10 ** -n) + 0.1) * (10 ** -n)
    else:
        return round(float(x), n)
    
def pred(l):
    #print(sorted(l))
    roundedList = map(roundUp, l);
    #print(sorted(list(roundedList)))
    freqDict = collections.Counter(roundedList)
    #print(freqDict)
    maxFreq = max(freqDict.values())    
    maxFreqList = [v for v, f in freqDict.items() if f == maxFreq]
    return median(maxFreqList)

#pdb.set_trace()    
print("the predominate price is " + str(pred(price)) + "\n");